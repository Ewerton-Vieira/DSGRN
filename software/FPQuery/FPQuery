#!/usr/bin/python
# FPQuery
# Usage:
#   First Usage:
#
#   ./FPQuery database_filename Var1 i1 i2 Var2 j1 j2
#
#   Return list of parameters for which there exists an FP node with an annotation satisfying 
#      i1 <= [Var1] <= i2  & j1 <= [Var2] <= j2
#   where [Var] denotes the bin variable Var falls into.
#
#   Second Usage:
# 
#   ./FPQuery database_filename Var1 i1 i2 Var2 j1 j2 Var3 k1 k2 Var4 l1 l2
#   
#   Return list of parameters for which there exists an FP node with an annotation with 
#      i1 <= [Var1] <= i2  & j1 <= [Var2] <= j2
#   and another (distinct from the first) FP node with an annotation satisfying
#      k1 <= [Var3] <= k2  & l1 <= [Var4] <= l2
#
#   Examples:
#
#   ./FPQuery 5D_2016_02_08_cancer_essential_VA.db EE1 2 4 RP 0 4 > parameters.txt
#
#   ./FPQuery 5D_2016_02_08_cancer_essential_VA.db EE1 2 4 RP 0 4 EE1 2 4 RP 0 1 > parameters.txt

import sys
import sqlite3

# Connect to SQLite database
conn = sqlite3.connect(sys.argv[1])
c = conn.cursor()

# Retrieve Network Specification
c.execute('select Specification from Network;');
netspec = c.fetchone()[0]

# Index the variable of the network specification
variables = []
for line in netspec.split('\n'):
  var = line.partition(' ')[0]
  if len(var) > 0:
    variables.append(var)

# Make a variables -> index table
varToIndex = {}
for i in range(0,len(variables)):
  varToIndex[variables[i]] = i

# Build index tables
c . execute ( 'create temp table I ( i int );');
c.executemany('INSERT INTO I VALUES (?)', zip(iter(range(0,len(variables)+1))))
c . execute ( 'create temp table J ( j int );');
c.executemany('INSERT INTO J VALUES (?)', zip(iter(range(0,len(variables)+1))))

def buildQueryExpression(variables, var1, var2, i1, i2, j1, j2):
  terms = []
  for i in range(0,len(variables)):
    terms . append ( "'_'" );
  terms[varToIndex[var1]] = 'i';
  terms[varToIndex[var2]] = 'j';
  expression = "'FP { ' || " + terms[0];
  for i in range(1,len(variables)):
    expression = expression + " || ', ' || " + terms[i]
  expression = expression + " || '%' and " + i1 + " <= i and i <= " + i2 + " and " + j1 + " <= j and j <= " + j2 + ";"
  return expression

if len(sys.argv) <= 8:
  # Parse the command line
  var1 = sys.argv[2]
  i1 = sys.argv[3]
  i2 = sys.argv[4]
  var2 = sys.argv[5]
  j1 = sys.argv[6]
  j2 = sys.argv[7]

  expression = buildQueryExpression(variables, var1, var2, i1, i2, j1, j2)

  # Create match table
  c.execute('create temp table Matches as select distinct MorseGraphIndex ' + 
            'from MorseGraphAnnotations join I join J where Label like ' + expression)

  # Final query and print results
  for row in c.execute('select ParameterIndex from Matches natural join Signatures;'):
    print row[0]
else:
  # Parse the command line
  var1 = sys.argv[2]
  i1 = sys.argv[3]
  i2 = sys.argv[4]
  var2 = sys.argv[5]
  j1 = sys.argv[6]
  j2 = sys.argv[7]

  expression1 = buildQueryExpression(variables, var1, var2, i1, i2, j1, j2)

  var1 = sys.argv[8]
  i1 = sys.argv[9]
  i2 = sys.argv[10]
  var2 = sys.argv[11]
  j1 = sys.argv[12]
  j2 = sys.argv[13]

  expression2 = buildQueryExpression(variables, var1, var2, i1, i2, j1, j2)

  # Create match table
  c.execute('create temp table Matches1 as select MorseGraphIndex, Vertex ' + 
            'from MorseGraphAnnotations join I join J where Label like ' + expression1)
  c.execute('create temp table Matches2 as select MorseGraphIndex, Vertex ' + 
            'from MorseGraphAnnotations join I join J where Label like ' + expression2)
  c.execute('create temp table Left as select MorseGraphIndex ' +
            'from (select * from Matches1 except select * from Matches2) group by MorseGraphIndex;')
  c.execute('create temp table Middle as select MorseGraphIndex, count(Vertex) as middle ' +
            'from (select * from Matches1 intersect select * from Matches2) group by MorseGraphIndex;')
  c.execute('create temp table Right as select MorseGraphIndex ' +
            'from (select * from Matches2 except select * from Matches1) group by MorseGraphIndex;')
  c.execute('create temp table Matches as ' +
            'select * from (select * from Left intersect select * from Right) ' +
            'union ' +
            'select * from (select MorseGraphIndex from Middle ' +
                           'intersect ' +
                           'select * from (select * from Left union select * from Right)) ' +
            'union ' +
            'select MorseGraphIndex from Middle where middle >= 2;')

  # Final query and print results
  for row in c.execute('select ParameterIndex from Matches natural join Signatures order by ParameterIndex;'):
    print row[0]

# Close the SQL connection
conn.close();
